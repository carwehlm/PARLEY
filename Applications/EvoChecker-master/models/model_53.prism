dtmc
const int c = 1;
const int N=9;
const int xstart = 0;
const int ystart = 0;
const int xtarget = 9;
const int ytarget = 9;
const double p = 0.01;
 
formula hasCrashed = (1=0) | (x=0 & y=6) | (x=0 & y=8) | (x=1 & y=2) | (x=1 & y=4) | (x=2 & y=1) | (x=2 & y=5) | (x=3 & y=2) | (x=4 & y=1) | (x=4 & y=3) | (x=4 & y=4) | (x=4 & y=7) | (x=5 & y=1) | (x=5 & y=3) | (x=5 & y=6) | (x=5 & y=9) | (x=6 & y=2) | (x=6 & y=5) | (x=6 & y=9) | (x=7 & y=2) | (x=7 & y=5) | (x=7 & y=7) | (x=7 & y=9) | (x=8 & y=3) | (x=8 & y=4) | (x=8 & y=8) | (x=9 & y=1) | (x=9 & y=2) | (x=9 & y=4) ;

module Robot 
  x : [0..N] init xstart;
  y : [0..N] init ystart;
  move_ready : [0..1] init 1;
  crashed : [0..1] init 0;

  [east] (move_ready=1) -> 
    (1-3*p): (x'=min(x+1, N)) & (move_ready'=0) + 
    p: (y'=min(y+1, N)) & (move_ready'=0) + 
    p: (y'=max(y-1, 0)) & (move_ready'=0) + 
    p: (x'=max(x-1, 0)) & (move_ready'=0); 
  [west] (move_ready=1) -> 
    p: (x'=min(x+1, N)) & (move_ready'=0) + 
    p: (y'=min(y+1, N)) & (move_ready'=0) + 
    p: (y'=max(y-1, 0)) & (move_ready'=0) + 
    (1-3*p): (x'=max(x-1, 0)) & (move_ready'=0); 
  [north] (move_ready=1) -> 
    p: (x'=min(x+1, N)) & (move_ready'=0) + 
    (1-3*p): (y'=min(y+1, N)) & (move_ready'=0) + 
    p: (y'=max(y-1, 0)) & (move_ready'=0) + 
    p: (x'=max(x-1, 0)) & (move_ready'=0); 
  [south] (move_ready=1) -> 
    p: (x'=min(x+1, N)) & (move_ready'=0) + 
    p: (y'=min(y+1, N)) & (move_ready'=0) + 
    (1-3*p): (y'=max(y-1, 0)) & (move_ready'=0) + 
    p: (x'=max(x-1, 0)) & (move_ready'=0); 

  [check] (move_ready=0) & hasCrashed -> (crashed'=1) & (move_ready'=1); 
  [check] (move_ready=0) & !hasCrashed -> (move_ready'=1); 
endmodule

module Adaptation_MAPE_controller
  [north] (xhat=0) & (yhat=0) -> true;
  [north] (xhat=0) & (yhat=1) -> true;
  [north] (xhat=0) & (yhat=2) -> true;
  [north] (xhat=0) & (yhat=3) -> true;
  [north] (xhat=0) & (yhat=4) -> true;
  [east] (xhat=0) & (yhat=5) -> true;
  [east] (xhat=0) & (yhat=7) -> true;
  [east] (xhat=0) & (yhat=9) -> true;
  [west] (xhat=1) & (yhat=0) -> true;
  [west] (xhat=1) & (yhat=1) -> true;
  [west] (xhat=1) & (yhat=3) -> true;
  [north] (xhat=1) & (yhat=5) -> true;
  [north] (xhat=1) & (yhat=6) -> true;
  [east] (xhat=1) & (yhat=7) -> true;
  [east] (xhat=1) & (yhat=8) -> true;
  [east] (xhat=1) & (yhat=9) -> true;
  [west] (xhat=2) & (yhat=0) -> true;
  [north] (xhat=2) & (yhat=2) -> true;
  [north] (xhat=2) & (yhat=3) -> true;
  [east] (xhat=2) & (yhat=4) -> true;
  [north] (xhat=2) & (yhat=6) -> true;
  [north] (xhat=2) & (yhat=7) -> true;
  [east] (xhat=2) & (yhat=8) -> true;
  [south] (xhat=2) & (yhat=9) -> true;
  [west] (xhat=3) & (yhat=0) -> true;
  [south] (xhat=3) & (yhat=1) -> true;
  [north] (xhat=3) & (yhat=3) -> true;
  [north] (xhat=3) & (yhat=4) -> true;
  [north] (xhat=3) & (yhat=5) -> true;
  [west] (xhat=3) & (yhat=6) -> true;
  [north] (xhat=3) & (yhat=7) -> true;
  [east] (xhat=3) & (yhat=8) -> true;
  [south] (xhat=3) & (yhat=9) -> true;
  [west] (xhat=4) & (yhat=0) -> true;
  [west] (xhat=4) & (yhat=5) -> true;
  [west] (xhat=4) & (yhat=6) -> true;
  [east] (xhat=4) & (yhat=8) -> true;
  [south] (xhat=4) & (yhat=9) -> true;
  [west] (xhat=5) & (yhat=0) -> true;
  [north] (xhat=5) & (yhat=4) -> true;
  [west] (xhat=5) & (yhat=5) -> true;
  [east] (xhat=5) & (yhat=7) -> true;
  [east] (xhat=5) & (yhat=8) -> true;
  [west] (xhat=6) & (yhat=0) -> true;
  [south] (xhat=6) & (yhat=1) -> true;
  [north] (xhat=6) & (yhat=3) -> true;
  [west] (xhat=6) & (yhat=4) -> true;
  [east] (xhat=6) & (yhat=6) -> true;
  [south] (xhat=6) & (yhat=7) -> true;
  [south] (xhat=6) & (yhat=8) -> true;
  [west] (xhat=7) & (yhat=0) -> true;
  [south] (xhat=7) & (yhat=1) -> true;
  [west] (xhat=7) & (yhat=3) -> true;
  [west] (xhat=7) & (yhat=4) -> true;
  [east] (xhat=7) & (yhat=6) -> true;
  [west] (xhat=7) & (yhat=8) -> true;
  [west] (xhat=8) & (yhat=0) -> true;
  [south] (xhat=8) & (yhat=1) -> true;
  [south] (xhat=8) & (yhat=2) -> true;
  [north] (xhat=8) & (yhat=5) -> true;
  [east] (xhat=8) & (yhat=6) -> true;
  [east] (xhat=8) & (yhat=7) -> true;
  [east] (xhat=8) & (yhat=9) -> true;
  [west] (xhat=9) & (yhat=0) -> true;
  [north] (xhat=9) & (yhat=5) -> true;
  [north] (xhat=9) & (yhat=6) -> true;
  [north] (xhat=9) & (yhat=7) -> true;
  [north] (xhat=9) & (yhat=8) -> true;
endmodule

module Knowledge
  xhat : [0..N] init xstart;
  yhat : [0..N] init ystart;
  step : [1..20] init 1;

  ready : [0..1] init 1;
  [west] ready=1 -> (xhat'=max(xhat-1, 0)) & (ready'=0);
  [east] ready=1 -> (xhat'=min(xhat+1, N)) & (ready'=0);
  [south] ready=1 -> (yhat'=max(yhat-1, 0)) & (ready'=0);
  [north] ready=1 -> (yhat'=min(yhat+1, N)) & (ready'=0);
  [update] step>=c & ready=0 -> (xhat'=x) & (yhat'=y) & (step'=1) & (ready'=1);
  [skip_update] step<c & ready=0 -> (ready'=1) & (step'=step+1);
endmodule

rewards "cost" 
  [east] true : 1; 
  [west] true : 1; 
  [north] true : 1; 
  [south] true : 1; 
  [update] true : 5;
endrewards 

