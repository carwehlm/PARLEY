dtmc
const int N=9;
const int xstart = 0;
const int ystart = 0;
const int xtarget = 9;
const int ytarget = 9;
const double p = 0.01;
 
formula hasCrashed = (1=0) | (x=0 & y=5) | (x=1 & y=2) | (x=1 & y=3) | (x=1 & y=4) | (x=1 & y=7) | (x=2 & y=5) | (x=2 & y=7) | (x=3 & y=2) | (x=3 & y=7) | (x=4 & y=4) | (x=5 & y=2) | (x=5 & y=6) | (x=5 & y=7) | (x=6 & y=3) | (x=6 & y=5) | (x=6 & y=7) | (x=6 & y=8) | (x=7 & y=1) | (x=7 & y=8) | (x=8 & y=5) | (x=8 & y=9) | (x=9 & y=2) | (x=9 & y=4) ;

module Robot 
  x : [0..N] init xstart;
  y : [0..N] init ystart;
  move_ready : [0..1] init 1;
  crashed : [0..1] init 0;

  [east] (move_ready=1) -> 
    (1-3*p): (x'=min(x+1, N)) & (move_ready'=0) + 
    p: (y'=min(y+1, N)) & (move_ready'=0) + 
    p: (y'=max(y-1, 0)) & (move_ready'=0) + 
    p: (x'=max(x-1, 0)) & (move_ready'=0); 
  [west] (move_ready=1) -> 
    p: (x'=min(x+1, N)) & (move_ready'=0) + 
    p: (y'=min(y+1, N)) & (move_ready'=0) + 
    p: (y'=max(y-1, 0)) & (move_ready'=0) + 
    (1-3*p): (x'=max(x-1, 0)) & (move_ready'=0); 
  [north] (move_ready=1) -> 
    p: (x'=min(x+1, N)) & (move_ready'=0) + 
    (1-3*p): (y'=min(y+1, N)) & (move_ready'=0) + 
    p: (y'=max(y-1, 0)) & (move_ready'=0) + 
    p: (x'=max(x-1, 0)) & (move_ready'=0); 
  [south] (move_ready=1) -> 
    p: (x'=min(x+1, N)) & (move_ready'=0) + 
    p: (y'=min(y+1, N)) & (move_ready'=0) + 
    (1-3*p): (y'=max(y-1, 0)) & (move_ready'=0) + 
    p: (x'=max(x-1, 0)) & (move_ready'=0); 

  [check] (move_ready=0) & hasCrashed -> (crashed'=1) & (move_ready'=1); 
  [check] (move_ready=0) & !hasCrashed -> (move_ready'=1); 
endmodule

module Adaptation_MAPE_controller
  [east] (xhat=0) & (yhat=0) -> true;
  [south] (xhat=0) & (yhat=1) -> true;
  [south] (xhat=0) & (yhat=2) -> true;
  [south] (xhat=0) & (yhat=3) -> true;
  [south] (xhat=0) & (yhat=4) -> true;
  [north] (xhat=0) & (yhat=6) -> true;
  [north] (xhat=0) & (yhat=7) -> true;
  [north] (xhat=0) & (yhat=8) -> true;
  [east] (xhat=0) & (yhat=9) -> true;
  [east] (xhat=1) & (yhat=0) -> true;
  [south] (xhat=1) & (yhat=1) -> true;
  [north] (xhat=1) & (yhat=5) -> true;
  [east] (xhat=1) & (yhat=6) -> true;
  [north] (xhat=1) & (yhat=8) -> true;
  [east] (xhat=1) & (yhat=9) -> true;
  [east] (xhat=2) & (yhat=0) -> true;
  [south] (xhat=2) & (yhat=1) -> true;
  [south] (xhat=2) & (yhat=2) -> true;
  [south] (xhat=2) & (yhat=3) -> true;
  [south] (xhat=2) & (yhat=4) -> true;
  [east] (xhat=2) & (yhat=6) -> true;
  [north] (xhat=2) & (yhat=8) -> true;
  [east] (xhat=2) & (yhat=9) -> true;
  [east] (xhat=3) & (yhat=0) -> true;
  [south] (xhat=3) & (yhat=1) -> true;
  [east] (xhat=3) & (yhat=3) -> true;
  [south] (xhat=3) & (yhat=4) -> true;
  [east] (xhat=3) & (yhat=5) -> true;
  [south] (xhat=3) & (yhat=6) -> true;
  [east] (xhat=3) & (yhat=8) -> true;
  [east] (xhat=3) & (yhat=9) -> true;
  [east] (xhat=4) & (yhat=0) -> true;
  [south] (xhat=4) & (yhat=1) -> true;
  [south] (xhat=4) & (yhat=2) -> true;
  [east] (xhat=4) & (yhat=3) -> true;
  [east] (xhat=4) & (yhat=5) -> true;
  [south] (xhat=4) & (yhat=6) -> true;
  [south] (xhat=4) & (yhat=7) -> true;
  [south] (xhat=4) & (yhat=8) -> true;
  [south] (xhat=4) & (yhat=9) -> true;
  [east] (xhat=5) & (yhat=0) -> true;
  [south] (xhat=5) & (yhat=1) -> true;
  [north] (xhat=5) & (yhat=3) -> true;
  [east] (xhat=5) & (yhat=4) -> true;
  [south] (xhat=5) & (yhat=5) -> true;
  [west] (xhat=5) & (yhat=8) -> true;
  [west] (xhat=5) & (yhat=9) -> true;
  [east] (xhat=6) & (yhat=0) -> true;
  [north] (xhat=6) & (yhat=1) -> true;
  [east] (xhat=6) & (yhat=2) -> true;
  [east] (xhat=6) & (yhat=4) -> true;
  [east] (xhat=6) & (yhat=6) -> true;
  [west] (xhat=6) & (yhat=9) -> true;
  [east] (xhat=7) & (yhat=0) -> true;
  [north] (xhat=7) & (yhat=2) -> true;
  [north] (xhat=7) & (yhat=3) -> true;
  [north] (xhat=7) & (yhat=4) -> true;
  [north] (xhat=7) & (yhat=5) -> true;
  [east] (xhat=7) & (yhat=6) -> true;
  [east] (xhat=7) & (yhat=7) -> true;
  [west] (xhat=7) & (yhat=9) -> true;
  [north] (xhat=8) & (yhat=0) -> true;
  [north] (xhat=8) & (yhat=1) -> true;
  [north] (xhat=8) & (yhat=2) -> true;
  [west] (xhat=8) & (yhat=3) -> true;
  [west] (xhat=8) & (yhat=4) -> true;
  [north] (xhat=8) & (yhat=6) -> true;
  [east] (xhat=8) & (yhat=7) -> true;
  [east] (xhat=8) & (yhat=8) -> true;
  [west] (xhat=9) & (yhat=0) -> true;
  [west] (xhat=9) & (yhat=1) -> true;
  [west] (xhat=9) & (yhat=3) -> true;
  [north] (xhat=9) & (yhat=5) -> true;
  [north] (xhat=9) & (yhat=6) -> true;
  [north] (xhat=9) & (yhat=7) -> true;
  [north] (xhat=9) & (yhat=8) -> true;
endmodule

module Knowledge
  xhat : [0..N] init xstart;
  yhat : [0..N] init ystart;
  step : [1..20] init 1;

  ready : [0..1] init 1;
  [west] ready=1 -> (xhat'=max(xhat-1, 0)) & (ready'=0);
  [east] ready=1 -> (xhat'=min(xhat+1, N)) & (ready'=0);
  [south] ready=1 -> (yhat'=max(yhat-1, 0)) & (ready'=0);
  [north] ready=1 -> (yhat'=min(yhat+1, N)) & (ready'=0);
  [update] step>=c & ready=0 -> (xhat'=x) & (yhat'=y) & (step'=1) & (ready'=1);
  [skip_update] step<c & ready=0 -> (ready'=1) & (step'=step+1);
endmodule

rewards "cost" 
  [east] true : 1; 
  [west] true : 1; 
  [north] true : 1; 
  [south] true : 1; 
  [update] true : 5;
endrewards 


evolve int decision_0_0 [1..10];
evolve int decision_0_1 [1..10];
evolve int decision_0_2 [1..10];
evolve int decision_0_3 [1..10];
evolve int decision_0_4 [1..10];
evolve int decision_0_5 [1..10];
evolve int decision_0_6 [1..10];
evolve int decision_0_7 [1..10];
evolve int decision_0_8 [1..10];
evolve int decision_0_9 [1..10];
evolve int decision_1_0 [1..10];
evolve int decision_1_1 [1..10];
evolve int decision_1_2 [1..10];
evolve int decision_1_3 [1..10];
evolve int decision_1_4 [1..10];
evolve int decision_1_5 [1..10];
evolve int decision_1_6 [1..10];
evolve int decision_1_7 [1..10];
evolve int decision_1_8 [1..10];
evolve int decision_1_9 [1..10];
evolve int decision_2_0 [1..10];
evolve int decision_2_1 [1..10];
evolve int decision_2_2 [1..10];
evolve int decision_2_3 [1..10];
evolve int decision_2_4 [1..10];
evolve int decision_2_5 [1..10];
evolve int decision_2_6 [1..10];
evolve int decision_2_7 [1..10];
evolve int decision_2_8 [1..10];
evolve int decision_2_9 [1..10];
evolve int decision_3_0 [1..10];
evolve int decision_3_1 [1..10];
evolve int decision_3_2 [1..10];
evolve int decision_3_3 [1..10];
evolve int decision_3_4 [1..10];
evolve int decision_3_5 [1..10];
evolve int decision_3_6 [1..10];
evolve int decision_3_7 [1..10];
evolve int decision_3_8 [1..10];
evolve int decision_3_9 [1..10];
evolve int decision_4_0 [1..10];
evolve int decision_4_1 [1..10];
evolve int decision_4_2 [1..10];
evolve int decision_4_3 [1..10];
evolve int decision_4_4 [1..10];
evolve int decision_4_5 [1..10];
evolve int decision_4_6 [1..10];
evolve int decision_4_7 [1..10];
evolve int decision_4_8 [1..10];
evolve int decision_4_9 [1..10];
evolve int decision_5_0 [1..10];
evolve int decision_5_1 [1..10];
evolve int decision_5_2 [1..10];
evolve int decision_5_3 [1..10];
evolve int decision_5_4 [1..10];
evolve int decision_5_5 [1..10];
evolve int decision_5_6 [1..10];
evolve int decision_5_7 [1..10];
evolve int decision_5_8 [1..10];
evolve int decision_5_9 [1..10];
evolve int decision_6_0 [1..10];
evolve int decision_6_1 [1..10];
evolve int decision_6_2 [1..10];
evolve int decision_6_3 [1..10];
evolve int decision_6_4 [1..10];
evolve int decision_6_5 [1..10];
evolve int decision_6_6 [1..10];
evolve int decision_6_7 [1..10];
evolve int decision_6_8 [1..10];
evolve int decision_6_9 [1..10];
evolve int decision_7_0 [1..10];
evolve int decision_7_1 [1..10];
evolve int decision_7_2 [1..10];
evolve int decision_7_3 [1..10];
evolve int decision_7_4 [1..10];
evolve int decision_7_5 [1..10];
evolve int decision_7_6 [1..10];
evolve int decision_7_7 [1..10];
evolve int decision_7_8 [1..10];
evolve int decision_7_9 [1..10];
evolve int decision_8_0 [1..10];
evolve int decision_8_1 [1..10];
evolve int decision_8_2 [1..10];
evolve int decision_8_3 [1..10];
evolve int decision_8_4 [1..10];
evolve int decision_8_5 [1..10];
evolve int decision_8_6 [1..10];
evolve int decision_8_7 [1..10];
evolve int decision_8_8 [1..10];
evolve int decision_8_9 [1..10];
evolve int decision_9_0 [1..10];
evolve int decision_9_1 [1..10];
evolve int decision_9_2 [1..10];
evolve int decision_9_3 [1..10];
evolve int decision_9_4 [1..10];
evolve int decision_9_5 [1..10];
evolve int decision_9_6 [1..10];
evolve int decision_9_7 [1..10];
evolve int decision_9_8 [1..10];
evolve int decision_9_9 [1..10];const int one=1;

module URC
  c : [1..10] init decision_0_0;
  [URC] one=1 & xhat=0 & yhat=0 -> (c'=decision_0_0);
  [URC] one=1 & xhat=0 & yhat=1 -> (c'=decision_0_1);
  [URC] one=1 & xhat=0 & yhat=2 -> (c'=decision_0_2);
  [URC] one=1 & xhat=0 & yhat=3 -> (c'=decision_0_3);
  [URC] one=1 & xhat=0 & yhat=4 -> (c'=decision_0_4);
  [URC] one=1 & xhat=0 & yhat=5 -> (c'=decision_0_5);
  [URC] one=1 & xhat=0 & yhat=6 -> (c'=decision_0_6);
  [URC] one=1 & xhat=0 & yhat=7 -> (c'=decision_0_7);
  [URC] one=1 & xhat=0 & yhat=8 -> (c'=decision_0_8);
  [URC] one=1 & xhat=0 & yhat=9 -> (c'=decision_0_9);
  [URC] one=1 & xhat=1 & yhat=0 -> (c'=decision_1_0);
  [URC] one=1 & xhat=1 & yhat=1 -> (c'=decision_1_1);
  [URC] one=1 & xhat=1 & yhat=2 -> (c'=decision_1_2);
  [URC] one=1 & xhat=1 & yhat=3 -> (c'=decision_1_3);
  [URC] one=1 & xhat=1 & yhat=4 -> (c'=decision_1_4);
  [URC] one=1 & xhat=1 & yhat=5 -> (c'=decision_1_5);
  [URC] one=1 & xhat=1 & yhat=6 -> (c'=decision_1_6);
  [URC] one=1 & xhat=1 & yhat=7 -> (c'=decision_1_7);
  [URC] one=1 & xhat=1 & yhat=8 -> (c'=decision_1_8);
  [URC] one=1 & xhat=1 & yhat=9 -> (c'=decision_1_9);
  [URC] one=1 & xhat=2 & yhat=0 -> (c'=decision_2_0);
  [URC] one=1 & xhat=2 & yhat=1 -> (c'=decision_2_1);
  [URC] one=1 & xhat=2 & yhat=2 -> (c'=decision_2_2);
  [URC] one=1 & xhat=2 & yhat=3 -> (c'=decision_2_3);
  [URC] one=1 & xhat=2 & yhat=4 -> (c'=decision_2_4);
  [URC] one=1 & xhat=2 & yhat=5 -> (c'=decision_2_5);
  [URC] one=1 & xhat=2 & yhat=6 -> (c'=decision_2_6);
  [URC] one=1 & xhat=2 & yhat=7 -> (c'=decision_2_7);
  [URC] one=1 & xhat=2 & yhat=8 -> (c'=decision_2_8);
  [URC] one=1 & xhat=2 & yhat=9 -> (c'=decision_2_9);
  [URC] one=1 & xhat=3 & yhat=0 -> (c'=decision_3_0);
  [URC] one=1 & xhat=3 & yhat=1 -> (c'=decision_3_1);
  [URC] one=1 & xhat=3 & yhat=2 -> (c'=decision_3_2);
  [URC] one=1 & xhat=3 & yhat=3 -> (c'=decision_3_3);
  [URC] one=1 & xhat=3 & yhat=4 -> (c'=decision_3_4);
  [URC] one=1 & xhat=3 & yhat=5 -> (c'=decision_3_5);
  [URC] one=1 & xhat=3 & yhat=6 -> (c'=decision_3_6);
  [URC] one=1 & xhat=3 & yhat=7 -> (c'=decision_3_7);
  [URC] one=1 & xhat=3 & yhat=8 -> (c'=decision_3_8);
  [URC] one=1 & xhat=3 & yhat=9 -> (c'=decision_3_9);
  [URC] one=1 & xhat=4 & yhat=0 -> (c'=decision_4_0);
  [URC] one=1 & xhat=4 & yhat=1 -> (c'=decision_4_1);
  [URC] one=1 & xhat=4 & yhat=2 -> (c'=decision_4_2);
  [URC] one=1 & xhat=4 & yhat=3 -> (c'=decision_4_3);
  [URC] one=1 & xhat=4 & yhat=4 -> (c'=decision_4_4);
  [URC] one=1 & xhat=4 & yhat=5 -> (c'=decision_4_5);
  [URC] one=1 & xhat=4 & yhat=6 -> (c'=decision_4_6);
  [URC] one=1 & xhat=4 & yhat=7 -> (c'=decision_4_7);
  [URC] one=1 & xhat=4 & yhat=8 -> (c'=decision_4_8);
  [URC] one=1 & xhat=4 & yhat=9 -> (c'=decision_4_9);
  [URC] one=1 & xhat=5 & yhat=0 -> (c'=decision_5_0);
  [URC] one=1 & xhat=5 & yhat=1 -> (c'=decision_5_1);
  [URC] one=1 & xhat=5 & yhat=2 -> (c'=decision_5_2);
  [URC] one=1 & xhat=5 & yhat=3 -> (c'=decision_5_3);
  [URC] one=1 & xhat=5 & yhat=4 -> (c'=decision_5_4);
  [URC] one=1 & xhat=5 & yhat=5 -> (c'=decision_5_5);
  [URC] one=1 & xhat=5 & yhat=6 -> (c'=decision_5_6);
  [URC] one=1 & xhat=5 & yhat=7 -> (c'=decision_5_7);
  [URC] one=1 & xhat=5 & yhat=8 -> (c'=decision_5_8);
  [URC] one=1 & xhat=5 & yhat=9 -> (c'=decision_5_9);
  [URC] one=1 & xhat=6 & yhat=0 -> (c'=decision_6_0);
  [URC] one=1 & xhat=6 & yhat=1 -> (c'=decision_6_1);
  [URC] one=1 & xhat=6 & yhat=2 -> (c'=decision_6_2);
  [URC] one=1 & xhat=6 & yhat=3 -> (c'=decision_6_3);
  [URC] one=1 & xhat=6 & yhat=4 -> (c'=decision_6_4);
  [URC] one=1 & xhat=6 & yhat=5 -> (c'=decision_6_5);
  [URC] one=1 & xhat=6 & yhat=6 -> (c'=decision_6_6);
  [URC] one=1 & xhat=6 & yhat=7 -> (c'=decision_6_7);
  [URC] one=1 & xhat=6 & yhat=8 -> (c'=decision_6_8);
  [URC] one=1 & xhat=6 & yhat=9 -> (c'=decision_6_9);
  [URC] one=1 & xhat=7 & yhat=0 -> (c'=decision_7_0);
  [URC] one=1 & xhat=7 & yhat=1 -> (c'=decision_7_1);
  [URC] one=1 & xhat=7 & yhat=2 -> (c'=decision_7_2);
  [URC] one=1 & xhat=7 & yhat=3 -> (c'=decision_7_3);
  [URC] one=1 & xhat=7 & yhat=4 -> (c'=decision_7_4);
  [URC] one=1 & xhat=7 & yhat=5 -> (c'=decision_7_5);
  [URC] one=1 & xhat=7 & yhat=6 -> (c'=decision_7_6);
  [URC] one=1 & xhat=7 & yhat=7 -> (c'=decision_7_7);
  [URC] one=1 & xhat=7 & yhat=8 -> (c'=decision_7_8);
  [URC] one=1 & xhat=7 & yhat=9 -> (c'=decision_7_9);
  [URC] one=1 & xhat=8 & yhat=0 -> (c'=decision_8_0);
  [URC] one=1 & xhat=8 & yhat=1 -> (c'=decision_8_1);
  [URC] one=1 & xhat=8 & yhat=2 -> (c'=decision_8_2);
  [URC] one=1 & xhat=8 & yhat=3 -> (c'=decision_8_3);
  [URC] one=1 & xhat=8 & yhat=4 -> (c'=decision_8_4);
  [URC] one=1 & xhat=8 & yhat=5 -> (c'=decision_8_5);
  [URC] one=1 & xhat=8 & yhat=6 -> (c'=decision_8_6);
  [URC] one=1 & xhat=8 & yhat=7 -> (c'=decision_8_7);
  [URC] one=1 & xhat=8 & yhat=8 -> (c'=decision_8_8);
  [URC] one=1 & xhat=8 & yhat=9 -> (c'=decision_8_9);
  [URC] one=1 & xhat=9 & yhat=0 -> (c'=decision_9_0);
  [URC] one=1 & xhat=9 & yhat=1 -> (c'=decision_9_1);
  [URC] one=1 & xhat=9 & yhat=2 -> (c'=decision_9_2);
  [URC] one=1 & xhat=9 & yhat=3 -> (c'=decision_9_3);
  [URC] one=1 & xhat=9 & yhat=4 -> (c'=decision_9_4);
  [URC] one=1 & xhat=9 & yhat=5 -> (c'=decision_9_5);
  [URC] one=1 & xhat=9 & yhat=6 -> (c'=decision_9_6);
  [URC] one=1 & xhat=9 & yhat=7 -> (c'=decision_9_7);
  [URC] one=1 & xhat=9 & yhat=8 -> (c'=decision_9_8);
  [URC] one=1 & xhat=9 & yhat=9 -> (c'=decision_9_9);
endmodule
module Turn
  t : [0..2] init 0;
  [east] (t=0) -> (t'=1);
  [west] (t=0) -> (t'=1);
  [north] (t=0) -> (t'=1);
  [south] (t=0) -> (t'=1);

  [URC] (t=1) -> (t'=2);

  [update] (t=2) -> (t'=0);
  [skip_update] (t=2) -> (t'=0);
endmodule
